# """
# Django settings for tasktracker project.

# Generated by 'django-admin startproject' using Django 5.2.4.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/
# d
# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
# """

# from pathlib import Path

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-3x!n7=(8d@)%7t%8%hf54ct8267-dan8foq-$v9w+n3uz#v$6x"
# # Tailwind Settings
# NPM_BIN_PATH = "C:/Program Files/nodejs/npm.cmd"  # adjust if npm is elsewhere

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []

# TENANT_MODEL = "customers.Client"
# TENANT_DOMAIN_MODEL = "customers.Domain"
# TAILWIND_APP_NAME = 'theme'
# INTERNAL_IPS = ['127.0.0.1']

# # Application definition
# SHARED_APPS = (
#     "django_tenants",           # mandatory
#     "customers",  
#     "tailwind",
#     "theme",     # you must list the app where your tenant and domain models are
#     "django.contrib.admin",
#     "django.contrib.auth",
#     "django.contrib.contenttypes",
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "django.contrib.staticfiles",
    
# )

# TENANT_APPS = (
#     "tracker",                  # your tenant-specific app(s)
#     # add other tenant-specific apps here
# )

# SHARED_APPS = (
#     "django_tenants",           # mandatory
#     "customers",                # must include the app with your Tenant & Domain models
#     "tailwind",
#     "theme",
#     "django.contrib.contenttypes",  # required in SHARED_APPS
#     "django.contrib.staticfiles",
# )

# TENANT_APPS = (
#     "django.contrib.admin",
#     "django.contrib.auth",          # moved to TENANT_APPS for tenant-specific users
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "tracker",                      # your tenant-specific app
# )

# INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

# MIDDLEWARE = [
#     "django_tenants.middleware.main.TenantMainMiddleware",
#     "django.middleware.security.SecurityMiddleware",
#     "django.contrib.sessions.middleware.SessionMiddleware",
#     "django.middleware.common.CommonMiddleware",
#     "django.middleware.csrf.CsrfViewMiddleware",
#     "django.contrib.auth.middleware.AuthenticationMiddleware",
#     "django.contrib.messages.middleware.MessageMiddleware",
#     "django.middleware.clickjacking.XFrameOptionsMiddleware",
# ]

# ROOT_URLCONF = "tasktracker.urls"

# TEMPLATES = [
#     {
#         "BACKEND": "django.template.backends.django.DjangoTemplates",
#         "DIRS": [],
#         "APP_DIRS": True,
#         "OPTIONS": {
#             "context_processors": [
#                 "django.template.context_processors.request",
#                 "django.contrib.auth.context_processors.auth",
#                 "django.contrib.messages.context_processors.messages",
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = "tasktracker.wsgi.application"


# # Database
# # https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django_tenants.postgresql_backend',
#         'NAME': 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }


# DATABASE_ROUTERS = (
#     'django_tenants.routers.TenantSyncRouter',
# )

# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = "en-us"

# TIME_ZONE = "UTC"

# USE_I18N = True

# USE_TZ = True

# LOGIN_URL = '/login/'  # Or wherever your login view actually is
# LOGIN_REDIRECT_URL = '/'
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL = "static/"
# STATICFILES_DIRS = [
#     BASE_DIR / TAILWIND_APP_NAME / "static",
# ]

# STATIC_ROOT = BASE_DIR / "staticfiles"
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'arjavbadjate1404@gmail.com'
# EMAIL_HOST_PASSWORD = 'tvqy nozn ydvt yxrc'  # Use App Password, not Gmail password
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# ALLOWED_HOSTS = ['https://django-multitenant-task-tracker.onrender.com']

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# import django_heroku
# django_heroku.settings(locals())



# from pathlib import Path
# import os
# import dj_database_url
# import django_heroku

# # Build paths inside the project
# BASE_DIR = Path(__file__).resolve().parent.parent

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get("SECRET_KEY", "fwvq6q$1*ie!6y!p)5ae084zm8v#8_@-kxkk=z2h$3+*t%olpy")

# DEBUG = os.environ.get("DEBUG", "True") == "True"

# ALLOWED_HOSTS = ['.onrender.com', 'localhost', '127.0.0.1']

# # Tailwind
# NPM_BIN_PATH = "C:/Program Files/nodejs/npm.cmd"
# TAILWIND_APP_NAME = 'theme'
# INTERNAL_IPS = ['127.0.0.1']

# # Tenants
# TENANT_MODEL = "customers.Client"
# TENANT_DOMAIN_MODEL = "customers.Domain"

# # Apps
# SHARED_APPS = (
#     "django_tenants",
#     "customers",
#     "tailwind",
#     "theme",
#     "django.contrib.contenttypes",
#     "django.contrib.staticfiles",
# )

# TENANT_APPS = (
#     "django.contrib.admin",
#     "django.contrib.auth",
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "tracker",
# )

# INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

# MIDDLEWARE = [
#     "django_tenants.middleware.main.TenantMainMiddleware",
#     "django.middleware.security.SecurityMiddleware",
#     "whitenoise.middleware.WhiteNoiseMiddleware",  # For static files in production
#     "django.contrib.sessions.middleware.SessionMiddleware",
#     "django.middleware.common.CommonMiddleware",
#     "django.middleware.csrf.CsrfViewMiddleware",
#     "django.contrib.auth.middleware.AuthenticationMiddleware",
#     "django.contrib.messages.middleware.MessageMiddleware",
#     "django.middleware.clickjacking.XFrameOptionsMiddleware",
# ]

# ROOT_URLCONF = "tasktracker.urls"

# TEMPLATES = [
#     {
#         "BACKEND": "django.template.backends.django.DjangoTemplates",
#         "DIRS": [],
#         "APP_DIRS": True,
#         "OPTIONS": {
#             "context_processors": [
#                 "django.template.context_processors.request",
#                 "django.contrib.auth.context_processors.auth",
#                 "django.contrib.messages.context_processors.messages",
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = "tasktracker.wsgi.application"

# # Database (use env var from Render or fallback to dev DB)
# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.environ.get("DATABASE_URL", "postgres://vt3db_user:98c1jtteY9EXufsVLRhe6ZqcwdPApJRl@dpg-d26g75ali9vc7393iveg-a/vt3db")
#     )
# }
# DATABASES['default']['ENGINE'] = 'django_tenants.postgresql_backend'

# DATABASE_ROUTERS = ('django_tenants.routers.TenantSyncRouter',)

# # Password validators
# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
# ]

# # Localization
# LANGUAGE_CODE = "en-us"
# TIME_ZONE = "UTC"
# USE_I18N = True
# USE_TZ = True

# # Static files
# STATIC_URL = "/static/"
# STATICFILES_DIRS = [
#     BASE_DIR / TAILWIND_APP_NAME / "static",
# ]
# STATIC_ROOT = BASE_DIR / "staticfiles"

# # WhiteNoise for static file handling
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# # Login
# LOGIN_URL = '/login/'
# LOGIN_REDIRECT_URL = '/'

# # Email config
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'arjavbadjate1404@gmail.com'
# EMAIL_HOST_PASSWORD = 'tvqy nozn ydvt yxrc'  # App password
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# # Primary key field
# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# # Enable Heroku-style settings
# django_heroku.settings(locals())


import os
from pathlib import Path
import dj_database_url
import django_heroku

# Paths
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "unsafe-secret-key")

# Debug mode: set to False in production
DEBUG = os.environ.get("DEBUG", "False") == "True"

# Hosts
ALLOWED_HOSTS = ['.onrender.com', 'localhost', '127.0.0.1']

# Tailwind
TAILWIND_APP_NAME = 'theme'
NPM_BIN_PATH = "C:/Program Files/nodejs/npm.cmd"  # Optional: remove on Linux/Render
INTERNAL_IPS = ['127.0.0.1']

# Tenants
TENANT_MODEL = "customers.Client"
TENANT_DOMAIN_MODEL = "customers.Domain"

# Shared/Tenant Apps
SHARED_APPS = (
    "django_tenants",
    "customers",
    "tailwind",
    "theme",
    "django.contrib.contenttypes",
    "django.contrib.staticfiles",
)

TENANT_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "tracker",
)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

# Middleware
MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Required for serving static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# URLs & WSGI
ROOT_URLCONF = "tasktracker.urls"
WSGI_APPLICATION = "tasktracker.wsgi.application"

# Templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Database config using dj_database_url + Render environment variable
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get("DATABASE_URL", "postgresql://vt3db_user:98c1jtteY9EXufsVLRhe6ZqcwdPApJRl@dpg-d26g75ali9vc7393iveg-a/vt3db")
    )
}
DATABASES['default']['ENGINE'] = 'django_tenants.postgresql_backend'
DATABASE_ROUTERS = ('django_tenants.routers.TenantSyncRouter',)

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Localization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (Render & production)
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / TAILWIND_APP_NAME / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Auth redirects
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'

# Email config (using Gmail app password)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Auto field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Activate Heroku/Render settings
django_heroku.settings(locals())
